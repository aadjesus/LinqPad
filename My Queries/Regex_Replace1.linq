<Query Kind="Program" />

void Main()
{
 	var msg = string.Format(MSG_CLIENT, "API_NNKOTE");
 	json = new Regex(string.Format("\"mensagem(.*){0}(.*[$\"])",msg))
		.Replace(json, string.Format("\"mensagem\":\"{0}'\"",msg));	
		
	json.Dump();
}

string json =  @"{""sucesso"":false,""erros"":[{""codigo"":2,""mensagem"":""System.InvalidOperationException: Não foi possível obter as empresas do Client 'API_NNKOTE'. ---> FluentNHibernate.Cfg.FluentConfigurationException: An invalid or incomplete configuration was used while creating a SessionFactory. Check PotentialReasons collection, and InnerException for more detail. ---> System.Data.SqlClient.SqlException: Erro de rede ou específico à instância ao estabelecer conexão com o SQL Server. O servidor não foi encontrado ou não estava acessível. Verifique se o nome da instância está correto e se o SQL Server está configurado para permitir conexões remotas. (provider: SQL Network Interfaces, error: 26 - Erro ao Localizar Servidor/Instância Especificada)\r\n   em System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)\r\n   em System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   em System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n   em System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   em System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   em System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   em System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   em System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   em System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   em System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)\r\n   em System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   em System.Data.SqlClient.SqlConnection.Open()\r\n   em NHibernate.Connection.DriverConnectionProvider.GetConnection()\r\n   em NHibernate.Tool.hbm2ddl.SuppliedConnectionProviderConnectionHelper.Prepare()\r\n   em NHibernate.Tool.hbm2ddl.SchemaMetadataUpdater.GetReservedWords(Dialect dialect, IConnectionHelper connectionHelper)\r\n   em NHibernate.Tool.hbm2ddl.SchemaMetadataUpdater.Update(ISessionFactoryImplementor sessionFactory)\r\n   em NHibernate.Impl.SessionFactoryImpl..ctor(Configuration cfg, IMapping mapping, Settings settings, EventListeners listeners)\r\n   em NHibernate.Cfg.Configuration.BuildSessionFactory()\r\n   em FluentNHibernate.Cfg.FluentConfiguration.BuildSessionFactory()\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em FluentNHibernate.Cfg.FluentConfiguration.BuildSessionFactory()\r\n   em Framework.Platform.LibBase.Dal.Configuration.NHibernateHelper.InitializeSessionFactory(String dbType, String dbVersion, String connString, Boolean showSql)\r\n   em Framework.Platform.LibBase.Dal.Configuration.NHibernateHelper.get_SessionFactory()\r\n   em Framework.Platform.LibBase.Dal.DaoBase`1.CreateSession()\r\n   em BgmRodotec.Auth.Api.BLL.ClientsBo.ObterEmpresas(String idClients)\r\n   --- Fim do rastreamento de pilha de exceções internas ---\r\n   em BgmRodotec.NnKote.Api.BLL.Integracao.IntegracaoBo.<CompradoresDoClient>d__23.MoveNext() na C:\\Praxio\\BgmRodotec.NnKote\\src\\BgmRodotec.NnKote.Api\\BLL\\Integracao\\IntegracaoBo_Autorizacao.cs:linha 29\r\n--- Fim do rastreamento de pilha do local anterior onde a exceção foi gerada ---\r\n   em System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   em System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   em System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   em BgmRodotec.NnKote.Api.BLL.Integracao.IntegracaoBo.<CadastrarUsuarioComprador>d__24.MoveNext() na C:\\Praxio\\BgmRodotec.NnKote\\src\\BgmRodotec.NnKote.Api\\BLL\\Integracao\\IntegracaoBo_CadastrarUsuarioComprador.cs:linha 24""}]}";

const string MSG_CLIENT = "Não foi possível obter as empresas do Client '{0}'.";